#import "/typ/templates/blog.typ": *

#show: main.with(
  title: "具体数学第一章课后习题详解",
  desc: [具体数学第一章课后习题的详细解答],
  date: "2024-08-17",
  tags: (
    blog-tags.math,
  ),
  license: licenses.cc-by-nc-sa,
)


#let question_counter = counter("question")

#set heading(
  numbering: numbly(
    "",
    (..x) => {
      question_counter.step()
      context question_counter.display() + "."
    },
    "{3:a}.",
  ),
)


最近在拜读高老头的大作《具体数学》, 并力所能及地完成习题. 习题的具体步骤将会以 Blog 文章的形式发出来, 就像这篇. 考虑到考试题可能涉及多个章节的内容, 第一遍通读我会先行跳过, 之后再来补上.

由于这一系列 Blog 文章都使用 Typst 排版, 所以网页上的显示效果可能会略差, 请多包涵.

= 热身题
==
"标号从 $1$ 直到 $n- 1$ 的马都有同样的颜色" 并不能推出 "标号从 $2$ 直到 $n$ 的马都有同样的颜色". 实际上, 这直接假定了我们要证明的结论.

==
考虑到要把整个塔移动到 B 柱, 首先要把最底下的盘移动到 B 柱. 移动最底下的盘时, 必须先移动到中间的柱, 然后将 B 柱上的盘移动回 A 柱, 再将最底下的盘移动到 B 柱. 然后再将剩余的盘移动到 B 柱.

设移动 $x$ 个盘的最短步数为 $H(x)$, 那么我们有:
$
  H(x) = H(x - 1) + 1 + H(x - 1) + 1 + H(x - 1) = 3 H(x - 1) + 2 wide (x>1) \
  H(1) = 2
$

这是我们得到的递归式, 为了得到一个封闭形式, 我们可以:
$
  H(x) + 1 =& 3H(x - 1) + 3 \
  =& 3(H(x-1) + 1) \
  =>& H(x) + 1 = 3^x \
  =>& H(x) = 3^x - 1
$

与此同时, 我们也得到了具体的移动策略:


#auto-div-pseudocode-list[
  + *function* Hanoi($A$, $M$, $B$, $n$)
    + #sym.triangle.stroked.r Move top $n$ plates from $A$ to $C$
    + *if* $n= 1$ *then*
      + *Move*($A$, $M$)
      + *Move*($M$, $B$)
      + *return*
    + *end*
    + *Hanoi*($A$, $M$, $B$, $n-1$)
    + *Move*($A$, $M$)
    + *Hanoi*($B$, $M$, $A$, $n-1$)
    + *Move*($M$, $B$)
    + *Hanoi*($A$, $M$, $B$, $n-1$)
  + *end*
]

==
这个题目的描述有些模糊, 我认为应当删除 "在3根桩柱上都" 几个字, 因为这样描述隐含了一种 "$x$ 种排列在三根桩柱上各出现一次, 共 $3x$ 次" 的意味, 这样会把研究对象转为 "一根桩柱上的排列", 然而实际上作者要求我们思考的是 $n$ 个圆盘作为整体, 在三个桩柱上的排列情况.

容易发现 $n$ 个圆盘的排列方式共有 $3^n$ 种, 除去初始状态之外, 剩余的 $3^n - 1$ 种排列恰好与上述的最短步长相等. 于是我们只需要说明上述每一步的末状态均不相同. 而这是显而易见的, 因为如果相同, 那么上述步骤就不是最短步骤.


==
如果以 $n$ 个圆盘的某种叠放方式为结束状态, 那么
- 当 $n = 1$ 时, 显然最多只需要 $1$ 步就能达成, $1 <= 2^1 - 1$.
- 设当 $n = k$ 时, 最多需要 $2^k - 1$ 步达成, 那么当 $n = k + 1$ 时,
  - 若要求最大的圆盘在左侧柱桩, 则同样需要至多 $2^k - 1 < 2^(k + 1) - 1$ 步达成.
  - 否则, 需要先把其他圆盘移动到剩余的一个空闲柱桩, 再将最大的圆盘移动到要求位置, 再将剩余圆盘移动到要求位置, 需要至多 $2^k - 1 + 1 + 2^k - 1 = 2^(k + 1) - 1$ 步达成.

综上所述, 以 $n$ 个圆盘的某种叠放方式为结束状态, 至多需要 $2^n - 1$ 次移动. 若以 $n$ 个圆盘的某种叠放方式为开始状态, 则将 "以 $n$ 个圆盘的某种叠放方式为结束状态" 时得出的步骤倒放即可, 同样至多需要 $2^n - 1$ 次移动.

故不存在 $n$ 个圆盘在 $3$ 根桩柱上的某种开始叠放或结束叠放, 使得按照卢卡斯原来的规则, 需要多于 $2^n - 1$ 次的移动.

==
根据平面图的 Euler 定理, 对于任意连通图, $V-E+F=2$, 其中 $E = 2V$, 则
$
  V - 2V + F =& 2 \
  F =& V + 2
$

也即, $"面数" = "顶点数" + 2$.

而两个圆之间至多有 $2$ 个交点, 对于四个圆, 则至多有 $2 + 4 + 6 = 12$ 个交点, 故至多把平面分成 $14$ 个面. 因此并不能描述.

==
至少有 $3$ 条直线相交才能确定一个有界的区域, 所以对于 $n$ 条两两相交的直线, 确定的有界区域数 $F_n$:
$
  F_n = F_(n-1) + n - 2 wide (n>1)
  F_1 = 0
$

故有
$
  F_n =& F_(n-1) + n - 2 \
  =& F_(n-2) + n - 3 + n - 2 \
  =& F_(n-3) + n - 4 + n - 3 + n - 2 \
  =& F_1 + 0 + 1 + 2 + dots.c + n - 2 \
  =& ((n-1)(n-2)) / 2
$

==
$
  H(1) = J(2) - J(1) = 1 - 1 = 0
$

第一项不成立.

= 作业题
==
多列几项就会发现数列 ${Q_n}$ 是以 $5$ 为周期循环的, 具体来说是
#table(
  columns: 6,
  rows: 2,
  align: horizon,
  $ n mod 5 $, ..range(5).map(x => $ #x $),
  $ Q_n $, $ alpha $, $ beta $, $ (1+beta) / alpha $, $ (1+alpha+beta) / (alpha beta) $, $ (1+alpha) / beta $
)

==
===  <9a>
令 $x_n = (x_1 + x_2 + dots.c + x_(n-1))$, 则根据 $P(n)$, 有
$
  x_1 x_2 dots.c x_n =& (x_1 x_2 dots.c x_(n-1) (x_1 + x_2 + dots.c + x_(n-1))) / (n-1) \
  <=& ((x_1 + x_2 + dots.c + x_(n-1) + (x_1 + x_2 + dots.c + x_(n-1)) / (n-1)) / n)^n \
  <=& ((x_1 + x_2 + dots.c + x_(n-1)) / (n-1))^n \
  x_1 x_2 dots.c x_(n-1) <=& ((x_1 + x_2 + dots.c + x_(n-1)) / (n-1))^(n-1)
$

$P(n-1)$ 成立, 故 $P(n)$ 蕴涵 $P(n-1)$.

===  <9b>
令 $x_1$ = $y_1 + y_2 + dots.c + y_n$, $x_2$ = $y_(n+1) + y_(n+2) + dots.c + y_(2n)$, 则由 $P(2)$, 有
$
  y_1 y_2 dots.c y_n y_(n+1) y_(n+2) dots.c y_(2n)<= ((y_1 y_2 dots.c y_n + y_(n+1) y_(n+2) dots.c y_(2n)) / 2)^2
$

又根据 $P(n)$, 有
$
  "LHS" <=& ((((y_1 + y_2 + dots.c + y_n) / n)^n + ((y_(n+1) + y_(n+2) + dots.c + y_(2n)) / n)^n) / 2)^2 \
  <=& ((((y_1 + y_2 + dots.c + y_(2n)) / n)^n) / 2)^2 \
  <=& ((y_1 + y_2 + dots.c + y_(2n))^(2n)) / (4 n^n) \
  <=& ((y_1 + y_2 + dots.c + y_(2n)) / (2n))^(2n)
$

$P(2n)$ 成立, 故 $P(n)$ 和 $P(2)$ 蕴涵 $P(2n)$.

===
$P(2)$ 成立, 根据 @9b 的结论, $P(2^n)$ 对于任意大的 $n$ 也成立, 再根据 @9a 的结论, 对于任意大的 $n$, 都有 $P(x)$ 在 $x <= 2^n$ 时成立.

于是 $P(n)$ 对任意 $n$ 成立.

==
实际上 $R_n$ 相当于将 $n$ 个圆盘顺时针移动一个桩柱的最少移动次数, $Q_n$ 则是将 $n$ 个圆盘逆时针移动一个桩柱的最少移动次数.

$Q_n$ 和 $R_n$ 在 $n=0$ 时的值显然是 $0$, 因为这不需要任何移动.

若 $n!=0$, 要把 $n$ 个圆盘顺时针移动一个桩柱, 则需要先把最大的圆盘顺时针移动一个桩柱, 这时 $B$ 柱必须是空的, 因此首先要把其余 $n-1$ 个圆盘逆时针移动一个桩柱, 再将最大的圆盘顺时针移动一个桩柱, 然后再把其余圆盘逆时针移动一个桩柱, 这时其余的圆盘就在 $B$ 柱上了. 也即 $Q_n = 2R_(n-1) + 1$. 所有步骤如下表格
#table(
  columns: 5,
  align: horizon,
  [步骤], [步数], $ A $, $ B $, [剩余的一个盘],
  [0], [], $ n, n-1, dots.c, 1 $, [], [],
  [1], $ R_(n-1) $, $ n $, [], $ n-1, n-2, dots.c, 1 $,
  [2], $ 1 $, [], $ n $, $ n-1, n-2, dots.c, 1 $,
  [3], $ R_(n-1) $, [], $ n, n-1, dots.c, 1 $, [],
)

若要把 $n$ 个圆盘逆时针移动一个桩柱, 步骤与上一种情况类似. 首先需要把最大的圆盘逆时针移动一个桩柱, 实际操作时则是顺时针移动两个桩柱, 这就需要 $B$ 桩柱是空的. 所以首先我们要把其余 $n-1$ 个圆盘逆时针移动一个桩柱, 再将最大的圆盘顺时针移动一个桩柱, 接下来我们需要再把最大的圆盘顺时针移动一个桩柱, 这需要第三个桩柱是空的, 所以我们需要把其余 $n-1$ 个桩柱先顺时针移动一个桩柱, 再把最大的圆盘顺时针移动一个桩柱, 最后我们需要把其余 $n-1$ 个圆盘移动到 $B$ 桩柱, 所以最终的步骤数为 $R_n = R_(n-1) + 1 + Q_(n - 1) + 1 + R_(n-1) = Q_n + Q_(n-1) + 1$. 所有步骤如下表格
#table(
  columns: 5,
  align: horizon,
  [步骤], [步数], $ A $, $ B $, [剩余的一个盘],
  [0], [], [$n, n-1, dots.c, 1$], [], [],
  [1], $ R_(n-1) $, $ n $, [], $ n-1, n-2, dots.c, 1 $,
  [2], $ 1 $, [], $ n $, $ n-1, n-2, dots.c, 1 $,
  [3], $ Q_(n-1) $, $ n-1, n-2, dots.c, 1 $, $ n $, [],
  [4], $ 1 $, $ n-1, n-2, dots.c, 1 $, [], $ n $,
  [5], $ R_(n-1) $, [], [], $ n, n-1, dots.c, 1 $,
)

==
===  <11a>
考虑到要把整个塔移动到 B 柱, 首先要把最底下的两个盘移动到 B 柱. 移动最底下的盘前, 必须先把其余 $n-1$ 个大小的盘移动到另一个柱子, 然后将 A 柱上的两个最大的盘移动到 B 柱, 然后再将剩余的盘移动到 B 柱.

设移动 $n$ 个尺寸的圆盘的最小步数为 $H(n)$, 则有
$
  H(1) = 2 \
  H(n) = 2H(n-1) + 2 wide n>1
$

这是我们得到的递归式, 为了得到一个封闭形式, 我们可以:
$
  H(n) =& 2H(n-1) + 2 \
  H(n) + 2 =& 2H(n-1) + 4 \
  H(n) + 2 =& 2(H(n-1) + 2) \
  H(n) + 2 =& 2^(n+1) \
  H(n) =& 2^(n+1) - 2
$

===
暂时跳过

==
与 @11a 同理, 我们有
$
  A(x) = x \
  A(m_1, dots.c, m_n) = 2A(m_1, dots.c, m_(n-1)) + m_n wide n>1
$

这是我们得到的递归式, 为了得到一个封闭形式, 我们可以:
$
  A(m_1, dots.c, m_n) =& 2A(m_1, dots.c, m_(n-1)) + m_n \
  =& 4A(m_1, dots.c, m_(n-2)) + 2 m_(n-1) + m_n \
  =& 2^(n-1)m_1 + dots.c + 2 m_(n-1) + m_n \
$

故 $A(m_1, dots.c, m_n) = sum_(i=1)^n 2^(n-i) m_i$.

==
我们可以构想一个更大的圆把所有 Z 包围, 然后根据平面图的 Euler 定理, 对于任意连通图, 有
$
  V-E+F=1
$

这里我们忽略大圆外面的一个面, 所以等式的右侧是1.

关于 $E$ 和 $V$, 我们可以根据几种不同的交点讨论求出. 经过观察, 交点的类型和对应的度有以下几种:
- Z 和外面大圆的交点: $2n$ 个, 度为 $3$
- Z 自身的两个折点: $2n$ 个, 度为 $2$
- 两个 Z 之间的交点: $x$ 个, 度为 $4$ (为了让产生的面最多, 我们保证任意两个 Z 的三条线都是相交的)

于是我们有
$
  2n+2n+x - (3 dot 2n + 2 dot 2n + 4x) / 2 + F =& 1 \
  F=& 1 + n +x
$

接下来我们只需要求出 $x$. 经过观察, 我们发现两个 Z 之间最多产生 $9$ 个交点, 又根据两个 Z 的三条线都相交, 我们可以得知
$
  x_1 = 0 \
  x_n = x_(n-1) + 9(n-1) wide n>1
$

我们把递归式展开
$
  x_n =& x_(n-1) + 9(n-1) \
  =& x_(n-2) + 9(n-2) + 9(n-1) \
  =& x_(n-3) + 9(n-3) + 9(n-2) + 9(n-1) \
  =& x_1 + 9 + dots.c + 9(n-3) + 9(n-2) + 9(n-1) \
  =& (9n(n-1)) / 2
$

然后再代入原式
$
  F=& 1 + n +x \
  =& 1 + n + (9n(n-1)) / 2 \
  =& (2 - 7 n + 9 n^2) / 2
$

==
考虑到当我们添加一个新的平面时, 新增的某个多面体不会同时有两个面在这个新的平面上, 因此新增的多面体数实际上等于该平面被其他平面截出的区域数, 也即
$
  P_1 = 2 \
  P_n = P_(n-1) + L_(n-1)
$

==
根据与正文中问题相同的讨论步骤, 我们有
$
  cases(
    I(2n) = 2 I(n) - 1,
    I(2n + 1) = 2 I(n) + 1
  ) wide
  cases(I(2) = 2, I(3) = 1)
$

参考书中的方法, 我们可以设 $beta_0 = -1, beta_1 = 1$, 于是递推式可以化成
$
  I(2n + j) = 2I(n) + beta_j
$

参考书中的方法, 我们用二进制表示 $n$
$
  n = (b_m b_(m-1) dots.c b_1 b_0)_2
$

则
$
  I((b_m b_(m-1) dots.c b_1 b_0)_2) =& 2I((b_m b_(m-1) dots.c b_1)_2) + beta_(b_0) \
  =& 4I((b_m b_(m-1) dots.c b_2)_2) + 2beta_(b_1) + beta_(b_0) \
  =& 2^(m-1) I((b_m b_(m-1))_2) + 2^(m-2) b_(m-2) + dots.c + 2beta_(b_1) + beta_(b_0) \
  =& cases(
    2^(m-1) + sum_(i=0)^(m-2) beta_b_i quad& b_(m-1) = 1,
    2^(m) + sum_(i=0)^(m-2) beta_b_i & b_(m-1) = 0,
  )
$

==
我们可以把通项的形式设为
$
  g(n) = A alpha + B gamma + C beta_0 + D beta_1
$

考虑 $gamma = 0$, 则本问题退化为正文中讨论过的问题, 可以得到
$
  g((b_m b_(m-1) dots.c b_1 b_0)_2) =& (alpha beta_b_(m-1) beta_b_(m-2) dots.c beta_b_1 beta_b_0)_3 \
  =& 3^m alpha + sum_(i=0)^(m-1) beta_b_i 3^i \
  =& 3^m alpha + sum_(i<m, beta_i = 0) 3^i b_0 + sum_(i<m, b_i = 1) 3^i beta_1
$

令 $g(n) = n$, 则有
$
  cases(
    1 = alpha,
    2n = 3n + gamma n + beta_0,
    2n + 1 = 3n + gamma n + beta_1,
  )
$

由于上面的结果对于任意 $n$ 都成立, 所以
$
  cases(
    alpha = 1,
    gamma = -1,
    beta_0 = 0,
    beta_1 = 1,
  )
$

故
$
  n =& A -B + D \
  B =& A + D - n\
  =& 3^m + sum_(i<m, b_i = 1) 3^i - n
$

故
$
  g(n) = 3^m alpha + ( 3^m + sum_(i<m, b_i = 1) 3^i - n )gamma + sum_(i<m, beta_i = 0) 3^i b_0 + sum_(i<m, b_i = 1) 3^i beta_1
$

= 考试题
= 附加题
= 研究题
